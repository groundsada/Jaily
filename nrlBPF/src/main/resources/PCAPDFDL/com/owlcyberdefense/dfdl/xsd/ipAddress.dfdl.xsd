<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright (c) 2012-2021 Owl Cyber Defense. All rights reserved.

Developed by: Owl Cyber Defense
              http://www.owlcyberdefense.com

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal with
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimers.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimers in the
    documentation and/or other materials provided with the distribution.

 3. Neither the names of Owl Cyber Defense, nor the names of its contributors
    may be used to endorse or promote products derived from this Software
    without specific prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
SOFTWARE.
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
           xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
           xmlns:fn="http://www.w3.org/2005/xpath-functions"
           xmlns:daf="urn:ogf:dfdl:2013:imp:daffodil.apache.org:2018:ext"
           xmlns:b="urn:basicBinary"
           xmlns:ip="urn:ipAddress"
           xmlns:tns="urn:ipAddress"
           targetNamespace="urn:ipAddress">

  <xs:import namespace="urn:basicBinary" schemaLocation="basicByteBinary.dfdl.xsd"/>

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">

      <dfdl:format ref="b:basicByteBinary"/>

    </xs:appinfo>
  </xs:annotation>

  <xs:complexType name="IPAddress">
    <xs:annotation>
      <xs:documentation><![CDATA[

      The underlying representation of this group is four single-byte unsigned binary integers.

      At parse time, this converts the that representation into a string like 1.2.3.4.

      At unparse time, this parses a string like 1.2.3.4 into the representation.

      Style / Best-Practice Warning:

      This kind of data transformation is NOT recommended practice in DFDL, as it is too complex
      to be considered a declarative description of the format.

      It would be better for the representation of an IP Address to be simply an array of
      4 integers such as:

          <IPSrc><byte>1</byte><byte>2</byte><byte>3</byte><byte>4</byte></IPSrc>

      This is easily expressed in DFDL in a fully declarative manner, with no need for
      the complexities of dfdl:inputValueCalc, dfdl:outputValueCalc, variables with
      dfdl:newVariableInstance, etc.

      This complex definition is being provided as an illustration of how to use
      dfdl:newVariableInstance and related DFDL constructs and essentially as a negative
      example to illustrate the trouble that trying to engineer a particular
      presentation of data causes in DFDL.

      Arguably, this DFDL schema only has to be created once, and as it is open-source
      people can use it to deal with IPv4 addresses anywhere. However, it is hard to
      ascertain the correctness and security/safety of this DFDL schema by inspection alone.

      ]]></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:sequence dfdl:hiddenGroupRef="tns:h_IPAddressGroup"/>
      <xs:element name="value" type="xs:string"
                  dfdl:inputValueCalc="{ fn:concat(../Byte1, '.', ../Byte2, '.', ../Byte3, '.', ../Byte4) }"/>
    </xs:sequence>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">

      <!-- Internally used by h_IPAddressGroup -->
      <dfdl:defineVariable name="remainingDottedAddr" type="xs:string" dfdlx:direction="unparseOnly"/>
      <dfdl:defineVariable name="priorRemainingDottedAddr" type="xs:string" dfdlx:direction="unparseOnly"/>

    </xs:appinfo>
  </xs:annotation>

  <xs:group name="h_IPAddressGroup">
    <xs:sequence>
      <xs:annotation>
        <xs:appinfo source="http://www.ogf.org/dfdl/">
          <dfdl:newVariableInstance ref="tns:priorRemainingDottedAddr"
                                    defaultValue='{ ./value }'/><!-- example 1.2.3.4 -->
          <dfdl:newVariableInstance ref="tns:remainingDottedAddr"
                                    defaultValue='{ $tns:priorRemainingDottedAddr }'/><!-- example 1.2.3.4 -->
        </xs:appinfo>
      </xs:annotation>
      <xs:element name="Byte1" type="xs:unsignedByte" dfdl:outputValueCalc="{
          xs:unsignedByte(fn:substring-before($tns:remainingDottedAddr, '.'))
          }"/>
      <xs:sequence>
        <xs:annotation>
          <xs:appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:newVariableInstance
              ref="tns:priorRemainingDottedAddr"
              defaultValue='{ $tns:remainingDottedAddr }'/><!-- example 1.2.3.4 -->
            <dfdl:newVariableInstance
              ref="tns:remainingDottedAddr"
              defaultValue='{ fn:substring-after($tns:priorRemainingDottedAddr, ".") }'/><!-- example 2.3.4 -->
          </xs:appinfo>
        </xs:annotation>
        <xs:element name="Byte2" type="xs:unsignedByte" dfdl:outputValueCalc="{
           xs:unsignedByte(fn:substring-before($tns:remainingDottedAddr, '.'))
           }"/>
        <xs:sequence>
          <xs:annotation>
            <xs:appinfo source="http://www.ogf.org/dfdl/">
              <dfdl:newVariableInstance
                ref="tns:priorRemainingDottedAddr"
                defaultValue='{ $tns:remainingDottedAddr }'/><!-- example 2.3.4 -->
              <dfdl:newVariableInstance
                ref="tns:remainingDottedAddr"
                defaultValue='{ fn:substring-after($tns:priorRemainingDottedAddr, ".") }'/><!-- example 3.4 -->
            </xs:appinfo>
          </xs:annotation>
          <xs:element name="Byte3" type="xs:unsignedByte" dfdl:outputValueCalc="{
              xs:unsignedByte(fn:substring-before($tns:remainingDottedAddr, '.'))
              }"/>
          <xs:sequence>
            <xs:annotation>
              <xs:appinfo source="http://www.ogf.org/dfdl/">
                <dfdl:newVariableInstance
                  ref="tns:priorRemainingDottedAddr"
                  defaultValue='{ $tns:remainingDottedAddr }'/><!-- example 3.4 -->
                <dfdl:newVariableInstance
                  ref="tns:remainingDottedAddr"
                  defaultValue='{ fn:substring-after($tns:priorRemainingDottedAddr, ".") }'/><!-- example 4 -->
              </xs:appinfo>
            </xs:annotation>
            <xs:element name="Byte4" type="xs:unsignedByte" dfdl:outputValueCalc="{
              xs:unsignedByte($tns:remainingDottedAddr)
              }"/>
          </xs:sequence>
        </xs:sequence>
      </xs:sequence>
    </xs:sequence>
  </xs:group>

</xs:schema>
